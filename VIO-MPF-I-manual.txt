

Connecting the VID-MPF-I

I)	Power supply:
	The VID-MPF-I has the same barrel type power connector as the MPF-I and the same polarity.
	- Voltage	7.5 - 9V
	- Ampere	??? A
	- Polarity	Center is positive
	The board accepts a 7805, and has some room for a heat sink, but a switching module is usually smaller and produces less heat than the linear 7805. It allows for higher input voltages without overheating.

II)	MPF-I:
	No changes have to be made to the MPF-I or MPF-IB board. But if other extensions are connected, make sure they don't interfere with the memory and I/O requirements of the VIO-MPF-I: ROM: A000h-AFFFh, RAM: 4000h-47FFh, I/O: F0-F1h

III)Installation instructions
	Connecting the VID-MPF-I is done with a 40 pin flatcable. 
	- Switch off all connected power supplies.
	- When using the original enclosure for the MPF-I and the VIO-MPF-I on the top left side of the enclosure, the length of the flatcable (distance between connectors) has to be at least 10 cm. 
	- Connect a PAL compatible composite monitor to the vodeo output.
	- Switch on the power supply of the VIO-MPF-I first and then the MPF-I power supply. The MPF-I should behave just like in the original configuration.
	- Run the routine at A000h. The monitor should display an empty screen with a blinking cursor in the top-left. Adjust the monitor controls if not.
	- Run the routine at A01Ch. The monitor should display a screen-filling banner. Adjust the monitor controls to make sure all rows and columns are visible.

IV)	When the configuration isn't working reliable, and each board has its own power supply, an extra ground line between the two power supplies can help stabilize it. The single ground pin between MPF-I and VID-MPF-I can be insufficient for a video-signal producing board as the VID-MPF-I.


Preliminary remarks

The VID-MPF-I card makes it possible to connect a display monitor to the MPF-I. The routines in the VID-MPF-I ROM show some of the possibilities of a video interface for the MPF-I configuration. The ROM routines are still being developed, but at the same time allows the user to create his or her own ideas. The assembly lising is available online so it is easy to inspect and extend the firmware. The firmware routines need not be confined to the VID-MPF-I board, so the current maximum ROM size is not a limitation. The RAM, which should be accessible to the MC6845 CRT is bound to the board.

Debugging programs is made much easier with the VID-MPF-I. It allows a memory dump in hex and ASCII, per 128 byte page (JP A01Fh). A full register dump (from the single stepper) is also possible, displaying all registers at the same time instead of one at the time with the Monitor.

The display monitor must be capable of interfacing with a monochrome PAL-compatible video signal. As the timing is very close to the PAL-standard cheap TFT-monitors will work very well.

Configuring the video interface. These routines return to the monitor after completion. Below the calls to be used in user programs are described

1.)	Video with BAS-signal (PAL compatible) for dislpay monitor - 40 characters x 20 rows

		[RS]
		[ADDR] A 0 0 7		A.0.0.7 C3
		[GO]

		Enter start address 0A007h and press GO-key.
		The display is cleared and initialised for 40x20 characters

2.) Write character set to the screen

		[RS]
		[ADDR] A 0 1 6		A.0.1.6 C3
		[GO]

		Enter start address 08016h and press GO-key.
		All available charcters are printed to the screen, both normal and inverse.

3.) Show display size and credentials

		[RS]
		[ADDR] A 0 1 C		A.0.1.C C3
		[GO]

		Enter start address 0801Ch and press GO-key.
		An ASCII border is shown outlining the screen size. The credentials are shown
		inside the border.

4.) Memory dump

		
		[RS]
		[ADDR] A 0 1 F		A.0.1.F C3
		[GO]

		Enter start address 0801Fh and press GO-key.
		The memory contents from 0000h to 007Fh is written to the display in both HEX and ASCII. The start address of the dump can be placed in memory locations 0461Eh-0461Fh. For example:

		[RS]
		[ADDR] 461Eh
		[DATA] A0
		[+]	   00
		[ADDR] A 0 1 F		A.0.1.F C3
		[GO]

Calls implemented in the ROM, to be used from user programs:

1.)	Clear screen call

		CALL	0A000h		Clears screen, puts cursor in the top left corner

2.) Initialises the MC6845 CRT

		CALL	0A004h		The display is cleared and initialised for 40x20 characters

3.) Write the character in the C register to the screen at the cursor position. Control characters (00h-1Fh) are interpreted.

		LD		C, @
		CALL	0A00Ah		The character is shown at the cursor position. The cursor is moved one position to the right for non-control characters. 

4.) Write the character in the C register to the screen at the cursor position. Control characters are not interpreted as special, but printed as character.

		LD		C, 00Ch
		CALL	0A00Dh		The character is shown at the cursor position. The cursor is moved one position to the right.

5.) The character string (0 terminated) pointed to by the IY register is printed to the screen at the cursor position. The cursor position is updated to the end of the string.

		LD		IY, <startOfString>
		CALL	0A010h

6.) The character string (0 terminated) pointed to by the IY register is printed to the screen at the cursor position. An line ending is automatically added. The cursor position is updated to the end of the string.

		LD		IY, <startOfString>
		CALL	0A013h

More routines are available, but not (yet) described.


Hardware specifications

* compatible with the MPF-I and MPF-IB via the 40 pin flatcable.

* MC6845 CRT controller or compatible for display control, I/O registers decoded to a 16 port range. The default usage is at 0F0h- 0F1H, but 15 other rangers are easy co configure (requires firmware re-assembly).

* 2 kByte video RAM, default at 0400h-04FFh, but all other 4 kByte ranges are configurable (requires firmware re-assembly).

* 4 kByte firmware ROM,default at 0A000h-0AFFFh, but all other 4kByte rangers are configurable (requires firmware re-assembly).

* circuit is compliant with Mode 2 interrupt usage (M1* used in selection).

* The firmware supports video-blanking (striping) prevention for CRT variants that support this (UM6845, SY6545, ...).

* The character ROM contains a full set of 256 characters, each 8 by 11 pixels in size. With this character height, 20 lines are supported. An alternate character size of 8 by 9 pixels supports 24 lines, while still generate a PAL-compatible video signal.


Software specifications

These are the most interesting entry addresses as of version 2.2:

* 0a000h:   clear screen, reset cursor 

* 0a004h:	init 6845, clear screen, return from call
 
* 0a007h:	init 6845, clear screen, jump to 0000h

* 0a00ah:	(JCRTCO) print character in C, interpret control codes

* 0a00dh:	(JCRTOU) print character in C, print codes 00h-31h too

* 0a010h:	(JTEXCO) print 00h terminated string (start in IY)

* 0a013h:	(JTEXCLN) print 00h terminated string (start in IY) with line end (CR/LF)

* 0a016h:	writes character set to screen, jump to 0000h

* 0a019h:   init 6845, clear screen, print banner, rst 0

* 0a01Fh:   hex/ascii memory dump of 8 * 16 bytes, rst 0

Memory map

0FFFFh  +-----------+
        |           |

        |           |
0B000h  +-----------+
        |           |
        |    ROM    |  VIO- monitor routines
        |           |
0A000h  +-----------+
        |           |

        |           |
05000h  +-----------+
        |           |
        |    RAM    |  Free to use
        |           |
04620h  +-----------+
        |           |
        |    RAM    |  VID Monitor work space
        |           |
04600h  +-----------+
        |           |
        | Video RAM |  Display memory space
        |           |
04000h  +-----------+
        |           |

        |           |
03000h  +-----------+
        |           |
        |  RAM/ROM  |  U7 socket on MPF-I(B) 
        |           |
02000h  +-----------+
        |           |
        |    RAM    |  U8 socket on MPF-I(B) 
        |           |
01800h  +-----------+
        |           |
        |           |  Unused space
        |           |
01000h  +-----------+
        |           |
        |    ROM    |  Tiny-Basic on MPF-I(B) 
        |           |
00800h  +-----------+
        |           |
        |    ROM    |  Monitor  on MPF-I(B)
        |           |
00000h  +-----------+


Theory of operation

In the bottom left corner of the schematic is the character generator EPROM U11. The eleven address lines of the 2716 EPROM are split into four for the character height and seven for the number of characters. This means characters can be 16 lines high and there can be 128 of them. The eight data lines limit the character width. In practice the character is eleven lines high. The character line data is latched by U4, a 74LS273. This latch is clocked by the character clock ZTKT*. This clock is derived from the oscillator X1 and counter U10. This divider defines the character width. Dividing by seven or six would result in narrower characters, but more would fit on a line. The ZTKT* clock is also fed to U8, the CRT-controller and the basis for all timings of the CRT.

Bottom right is the ROM U19, selectable as 2 kByte and 4 kByte EPROM. The default location in the accress map is 0A000h-0AFFFh. Left of this U15 the bi-directional buffer which regulates CPU access to the video RAM and the character generator chain. The Video RAM, U12, gets its addressing from the three  2-line multiplexers (U16, U17 and U18). These select either the CRT generating address lines (HSBL* low), or the CPU address lines (HSBL* high).

U8, the CRT-controller generates character-line addressing with the MA0-MA13 lines. For this board only MA0-MA10 are used, enough for the 2 kByte video RAM. The RA0-RA4 lines generate the character-lines, of which only RA0-RA3 are used. Some other video relates signals are also generated, like HSYNC, VSYNC, DEN and CU. DEN (display ENable) blanks the video outside the character area, CU (CUrsor) superimposes the cursor on the signal. 

The bi-directional buffer U14 switches the data direction to and from the CRT and is superfluous. It was there on the original board and faitfully copied. But just eight wires would work just as well.

Below this the address and I/O selection. The CRT I/O addresses are preset to 0F0h-0FFh, but with trace-cutting and using the jumpers J5-J8, any 16 port range could be selected. The single resistor R7 is than not enough, each jumper should have its own resistor. The bit pattern created with J5-J8 is compared with address lines AD4-AD7 in U2, an 74LS85. On them being equal is the CRT chip select signal. An inverted (U5D) IORQ* is applied to the 74LS85 Ia=b line to limit the selection to I/O-ports.
The U5C NAND-as-inverter can be changed to true NAND by feeding M1* to one of the pins. This would make the circuit compatible with interrupt request acknowledge usage, typically for the Z80 interrupt mode 2. 

Errata for the 2.0 remake board:

The first remake is marked 2.0. During component assembly and testing some problems were found. These problems were:

Use the MI* signal in I/O-port selection.

    This can give problems during an interrupt acknowledge. Remove the trace between U5-9 and U5-10 (component side, alas) and connect U5-10 to J1-27.
    
Address selection mix-up.

    The ROM is at 4000h and RAM at A000h. Cut the traces between the J9 pins and he J10 pins. Connect J9-1 with J10-2 and J9-2 and J10-1. Selecting other outputs of U3 and U20 make it possible to change the address mapping of ROM and video-RAM.
    
Font-ROM bit mix-up.

    During transcribing the original schema to KiCAD, the order of the bits between the Font-ROM and the latch went wrong, mangling the characters.
    
    Cut traces to U11-13, U11-14, U11-16, and U11-17.
    Connect U11-13 to U4-7, U11-14 to U4-14, U11-16 to U4-13 and U11-17 to U4-8. 

I/O-port selection pull-up problem.

    For the default I/O-selection of 0F0h-0FFh (all of AD4-AD7 high) a single pull-up resistor is fine, but for other ranges, a pull-up resister per address line is needed. This requires cutting traces between the jumpers, but not between the jumpers and the U2 (74LS85) inputs. Then a resistor per jumper/address line should be added. There is not yet a complete description for this.
    
    This operation could be combined with a change to include AD1 to AD3 to the port addressing. This would reduce the port range from sixteen to just two, which could be useful for systems with limited free I/O-ports. 
    
Video signal striping

    If the video signal suffers from striping or video blanking during reads and writes to video-RAM, it is caused bu CPU access during character generation. The firmware tries to prevent this, but not all MC6845 CRT variants support this. The standard MC6845P and UM8645 don't, but the UM6845R and MOS6545-1 do. In case of doubt, consult the datasheet for your chip and look for the availability of the Status register. When available, no striping should occur, at least when accessing the board with the firmware. The striping is prevented in software, so other code can still produce it when accessing video RAM.
  
